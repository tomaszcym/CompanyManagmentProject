<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2En0AAAAAAwAAAAwAAAATAAAAFAAAABQAAAAUAAAAFAAA
        ABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAA
        ABQAAAATAAAADAAAAAM7EooAAAAAAAAAAAAAAAAAAAAAAAAAAAEuEGwjURq8ilccy7VXHMu3VxzLt1cc
        y7dXHMu3VxvLt1cby7dXG8u3VBrHt1EYvrdQGL23URi+t1EYv7dSGMC3UhjAt1IZwbdSGcK3UhnCt1MZ
        w7dTGcO3VBnEt1QZxLVOGLaKLA9qIwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAABFgdy4JjIeX7ZSHp/2Uh
        6f9kIOn/ZCDp/2Qg6f9kIOn/ZCDp/2If5f9eHdz/XR3Z/1wc2f9dHNn/XRza/10c2/9eHNz/Xhzc/14c
        3f9eHd7/Xx3f/18d3/9fHeD/YB3h/14d3vtUGsaCAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAFYCDerGUi
        6f9lIun/ZSLp/2Ui6f9lIen/ZSHp/2Uh6f9jIOX/Xh7b/1we1/9dHdn/XR3Z/10c2f9dHNr/XRzb/10c
        2/9eHNz/Xhzd/14d3v9eHd7/Xx3f/18d4P9gHeH/YB3i/1wc2KwAAAAFAAAAAAAAAAAAAAAAAAAAAAAA
        AAViIeCtZiLp/2Yi6f9lIun/ZSLp/2Ui6f9lIun/YyHl/14f2v9dH9b/XB7X/10e2P9dHtn/XR3Z/10d
        2f9dHNr/XRza/10c2/9eHNz/Xhzd/14c3f9eHd7/Xx3f/18d4P9gHeH/XBzYrQAAAAUAAAAAAAAAAAAA
        AAAAAAAAAAAABWMh4a1nI+r/ZyPq/2Yi6f9mIun/ZiLp/2Qh5f9fINn/XR/V/10f1v9dH9b/XR/X/10e
        2P9dHtj/XR3Z/10d2f9dHNr/XRza/10c2/9eHNz/Xhzd/14d3f9eHd7/Xx3f/18d4P9cHNitAAAABQAA
        AAAAAAAAAAAAAAAAAAAAAAAFYyLhrWcj6v9nI+r/ZyPp/2Ui5/9iIOD/Wx7S/1oez/9bHtL/XB/U/10f
        1v9dH9b/Wx7U/1sd1P9bHdX/XR3Y/10d2P9bG9f/WxvX/1wc2f9eHNv/XRzb/1wb2v9cG9r/Xhze/1sc
        160AAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAVjI+GtZyTq/2Yk6f9iIeL/YSTW/2Etx/9hL8D/XyzC/1oj
        xv9YHMz/XB/T/1wf0v9fJ8z/YCrI/14mzf9cHtT/Wx3U/10jzf9fJ8v/Wx7S/1wc2P9dH9X/YCfO/2An
        zv9eINf/WhvUrQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAABWQj4a1oJen/ZCPh/3NA1/+pj9z/1szq/+Td
        8f/Zz+z/s53c/3VJyf9ZH8r/WR3N/6iM3v/Vy+r/q5Df/18k0f9eJM//rZTf/87B6P+EWdb/VhfT/3lI
        2P/Juuj/zb/p/31N2v9VFtGtAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAFZSTgrWYk5v91QNv/0cLu////
        /v/7+f7/9PD8//n3/f//////3tXw/3tQzv9VGsj/xbLs///////Kt+z/YCfP/3NE0P/t6Pj//////7ym
        5v9XG83/hFfb//Tx+//6+P3/iV3f/1QUz60AAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAVkJd+tZyjh/7ab
        6f//////7ej5/5584P96S9f/k23d/+LY9f//////xLLn/10mxv/EsOr//////8i26/9eJ8r/pYfe//38
        /v//////5Nz0/3FA0P+BVdf/8/D6//n3/P+JXd7/UxTPrQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAABWIj
        3q15Q+L/39P1//////+ymOT/XiTN/1wh0P9bIM7/p4jj//f1/f/m3vb/aDXL/8Sw6v//////x7Xq/2s8
        yf/SxO3//v3+//n3/P/9/P7/mHbZ/4JX1P/z7/r/+ff8/4hd3f9TFM6tAAAABQAAAAAAAAAAAAAAAAAA
        AAAAAAAFYCHcrYtc5v/y7fv/+/v9/45o1/9aHsz/XiPR/14j0f9yP9b/lXDg/5Ns4P9kLc7/xbHr////
        ///Es+f/jWrR//Xz+v/i2fX/vafo//v6/v/Mver/iWPT//Lt+v/59/z/iF3d/1IUzq0AAAAFAAAAAAAA
        AAAAAAAAAAAAAAAAAAVgINytkWTn//j1/P/18/r/h2DU/1ofy/9eI9D/XiPR/14j0P9dIdD/XCHQ/1kf
        zP/Fsuv//////8e35v+7p+H//////7yl6v92RtX/7Ob5//Ds+P+kidj/7ej3//n3/P+IXdz/UhTNrQAA
        AAUAAAAAAAAAAAAAAAAAAAAAAAAABWEh3K2RZej/+PX8//Xz+v+HYNP/WiDL/14kz/9eJM//XCLL/1kg
        x/9aIMj/WB/I/8Wy6///////08fp/+zn9f/39Pz/i2Hc/18k0f/Bq+v//f3+/9bM6//s5vb/+ff8/4hd
        3P9SFM2tAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAFYiPerY1d6f/y7fv/+/v9/4xp0v9ZIMf/XiXN/1wj
        y/9vQMn/kHDP/49t0P9hLcb/xbHq///////28/r//v7+/9zQ8/9pMtP/WhzT/5Rs4//59/7/+fj7//n3
        /P/49vz/iF3c/1ITzK0AAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAVlJt+tfUXo/+DT+P//////sZvc/1on
        v/9ZI8T/VyHA/6SJ2P/39fr/5d30/2o3zP/Gsuz/////////////////q43k/14i0v9gHt3/dTzl/93Q
        +P////////////j2+/+IXdv/UhTLrQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAABWgp4a1tLej/uJry////
        ///u6vb/nIHQ/3NMv/+MbMn/4Nfv///////Hsu//ZyvZ/8iz8v///////////+3o+f+CVNj/Xx7c/2Yi
        6P9kIub/tpnx///+////////+Pb7/4he2/9SFMqtAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAFaSrhrWwr
        6v98ROn/08D3//7+///7+vz/8/D4//j3+///////49f5/4hY6f9kI+L/yrX0////////////y7nv/2kt
        3P9mI+j/ZyPq/2Qg6P+IVen/9O/8///////59/z/il/d/1UW0K0AAAAFAAAAAAAAAAAAAAAAAAAAAAAA
        AAVpK+GtbSzq/2wr6f9+Ruv/s5Ly/9zN+f/p4Pv/4dT6/8Cl9P+HVOv/airp/2gm5/+ykfL/3M35/9fG
        +P+ZcOv/ZSPn/2ck6v9nI+r/ZiLp/20u5/+/pPT/2sr4/9PB9v+DUOb/XBncrQAAAAUAAAAAAAAAAAAA
        AAAAAAAAAAAABWks4a1tLev/bS3q/2wr6f9uLun/dTjq/3c86v91Oer/by/p/2kn6f9qKer/ainq/28x
        6v9yNer/cTPq/2sq6f9oJer/ZyTq/2ck6v9nI+r/ZiPp/2sr6f9uL+n/bS7p/2ck6f9gHt+tAAAABQAA
        AAAAAAAAAAAAAAAAAAAAAAAFaizirW4u6/9uLuv/bS3q/20s6v9sK+r/bCrq/2sq6v9sKur/aynq/2sp
        6v9qKer/aijq/2kn6v9pJur/aSbq/2gl6v9oJer/ZyTq/2cj6v9mIun/ZSHp/2Qh6f9kIOn/ZCDp/2Af
        4K0AAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAVrLeKtby/r/24u6/9uLuv/bS3q/20t6v9tLOr/bCvq/2wr
        6v9sKur/aynq/2sp6v9qKer/aijq/2kn6v9pJ+r/aSbq/2gl6v9nJOr/ZyPq/2cj6v9mIun/ZSLp/2Uh
        6f9lIOn/YB/grQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAABWsu4q1vMOv/by/r/24u6/9uLuv/bS3q/20s
        6v9tLOr/bCvq/2wq6v9rKer/aynq/2op6v9qKOr/aSfq/2kn6v9pJur/aCXq/2ck6v9nJOr/ZyPq/2Yi
        6f9lIun/ZSLp/2Uh6f9gH+CtAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAEbC/jq28w6/9vL+v/by/r/24u
        6/9uLuv/bS3q/20s6v9sK+r/bCvq/2wq6v9rKer/ainq/2op6v9qKOr/aSfq/2km6v9pJur/ZyTq/2ck
        6v9nI+r/ZiLp/2Ui6f9lIun/ZSHp/2Eg4asAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAABvNOJ6cTLr+XAx
        6/9wMev/cDDr/28v6/9uLur/bi7q/24t6v9tLOr/bSvq/2wr6v9rKur/ayrq/2sp6v9qKOr/aijq/2on
        6v9pJur/aCXq/2gl6v9nJOr/ZiPp/2Yj6f9mI+n5ZSbhegAAAAAAAAAAAAAAAAAAAAAAAAAAgEP3AG8+
        0xR2O+h4dTjqpnQ46qh0N+qoczfqqHI26ahyNemocjTpqHE06ahxM+mocTPpqHAx6ahvMemobzHpqG8w
        6KhuL+mobi7pqG4u6ahtLumobCzpqGws6ahrK+ioayvopmwt5nhnLtMUdTL2AAAAAAAAAAAAAAAAAAAA
        AAD/qv8AczrlAKFM/wD/d/8A/4X/AP+D/wD/gf8A/3//AP99/wD/e/8A/3n/AP93/wD/dv8A/3P/AP9z
        /wD/cv8A/2//AP9t/wD/a/8A/2r/AP9p/wD/Zv8A/2T/AP9j/wDsWP8Akzf/AGor4wD/fP8AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAwAAAA4AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAAAABwAAAA/////8=
</value>
  </data>
</root>